
This patch is hack enabling internal Eth phy on H616/H313 SoCs
Basically it does following:
-enables i2c3 (needed to communicate with AC200/AC300)
-enables PWM (needed for clocking AC200/AC300)
-programs ephy by i2c - if board has AC200
-if board has AC300
  -disables intelligent_ieee and 802_3az_ieee features
  -checks SID for requirement of "fixed" phy config and applies
   it if requirement is detected
-reduces i2c bus clock to 100kHz

All kudos to sputnik2019 for his incredible help!

diff --git a/arch/arm/dts/sun50i-h616.dtsi b/arch/arm/dts/sun50i-h616.dtsi
index dd4d2f31..84b80156 100644
--- a/arch/arm/dts/sun50i-h616.dtsi
+++ b/arch/arm/dts/sun50i-h616.dtsi
@@ -152,6 +152,13 @@
 				drive-strength = <40>;
 			};
 
+			rmii_pins: rmii-pins {
+				pins = "PA0", "PA1", "PA2", "PA3", "PA4",
+				       "PA5", "PA6", "PA7", "PA8", "PA9";
+				function = "emac1";
+				drive-strength = <40>;
+			};
+
 			i2c0_pins: i2c0-pins {
 				pins = "PI6", "PI7";
 				function = "i2c0";
diff --git a/arch/arm/mach-sunxi/Kconfig b/arch/arm/mach-sunxi/Kconfig
index 14c0f3b6..05fed67e 100644
--- a/arch/arm/mach-sunxi/Kconfig
+++ b/arch/arm/mach-sunxi/Kconfig
@@ -776,7 +776,7 @@ config I2C2_ENABLE
 	---help---
 	See I2C0_ENABLE help text.
 
-if MACH_SUN6I || MACH_SUN7I
+if MACH_SUN6I || MACH_SUN7I|| MACH_SUN50I_H616
 config I2C3_ENABLE
 	bool "Enable I2C/TWI controller 3"
 	default n
diff --git a/arch/arm/mach-sunxi/board.c b/arch/arm/mach-sunxi/board.c
index c6ae5b66..5ab96049 100644
--- a/arch/arm/mach-sunxi/board.c
+++ b/arch/arm/mach-sunxi/board.c
@@ -348,6 +348,7 @@ void board_init_f(ulong dummy)
 #ifdef CONFIG_SPL_I2C
 	/* Needed early by sunxi_board_init if PMU is enabled */
 	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
+	i2c_set_bus_num(1);
 #endif
 	sunxi_board_init();
 }
diff --git a/arch/arm/mach-sunxi/clock_sun50i_h6.c b/arch/arm/mach-sunxi/clock_sun50i_h6.c
index b97a09c3..b70b9beb 100644
--- a/arch/arm/mach-sunxi/clock_sun50i_h6.c
+++ b/arch/arm/mach-sunxi/clock_sun50i_h6.c
@@ -35,6 +35,11 @@ void clock_init_safe(void)
 	 * DRAM initialization code.
 	 */
 	writel(MBUS_CLK_SRC_PLL6X2 | MBUS_CLK_M(3), &ccm->mbus_cfg);
+	/* add by rll for pwm ephy */
+	writel(0x10001, 0x030017ac);
+	writel(0x80004, 0x0300a104);
+	writel(0x50, 0x0300a028);
+	writel(0x20, 0x0300a040);
 }
 #endif
 
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index c4f69966..38f9a6ba 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -43,6 +43,7 @@
 #include <fdt_support.h>
 #include <nand.h>
 #include <net.h>
+#include <i2c.h>
 #include <spl.h>
 #include <sy8106a.h>
 #include <asm/setup.h>
@@ -181,6 +182,13 @@ void i2c_init_board(void)
 	sunxi_gpio_set_cfgpin(SUNXI_GPI(0), SUN7I_GPI_TWI3);
 	sunxi_gpio_set_cfgpin(SUNXI_GPI(1), SUN7I_GPI_TWI3);
 	clock_twi_onoff(3, 1);
+#elif defined(CONFIG_MACH_SUN50I_H616)
+	sunxi_gpio_set_cfgpin(SUNXI_GPA(10), 2);
+	sunxi_gpio_set_cfgpin(SUNXI_GPA(11), 2);
+	sunxi_gpio_set_cfgpin(SUNXI_GPA(12), 2);
+	sunxi_gpio_set_pull(SUNXI_GPA(10), SUNXI_GPIO_PULL_UP);
+	sunxi_gpio_set_pull(SUNXI_GPA(11), SUNXI_GPIO_PULL_UP);
+	clock_twi_onoff(3, 1);
 #endif
 #endif
 
@@ -677,9 +685,13 @@ static void sunxi_spl_store_dram_size(phys_addr_t dram_size)
 	spl->dram_size = dram_size >> 20;
 }
 
+#define sunxi_ac300_key (1<<8)
+
 void sunxi_board_init(void)
 {
 	int power_failed = 0;
+	int val;
+	u8 data[2];
 
 #ifdef CONFIG_MACH_SUN8I_H3
 	/* turn on power LED (PL10) on H3 boards */
@@ -762,8 +774,31 @@ void sunxi_board_init(void)
 	 */
 	if (!power_failed)
 		clock_set_pll1(CONFIG_SYS_CLK_FREQ);
-	else
-		printf("Failed to set core voltage! Can't set CPU frequency\n");
+	else {
+		clock_set_pll1(792000000);
+		printf("Failed to set core voltage!   set CPU 792000000hz frequency\n");
+	}
+
+	val=readl(0x300622c);
+	if((val&sunxi_ac300_key)==0)
+	{
+		i2c_set_bus_num(0);
+		data[0] = 0;
+		data[1] = 0;
+		i2c_write(0x10, 0xfe, 1, data, 2);
+		i2c_write(0x10, 2, 1, data, 2);
+		data[1] = 1;
+		i2c_write(0x10, 2, 1, data, 2);
+		data[1] = 0xf;
+		i2c_write(0x10, 0x16, 1, data, 2);
+		data[1] = 3;
+		i2c_write(0x10, 0x14, 1, data, 2);
+		data[1] = 0x60;
+		i2c_write(0x10, 0xfe, 1, data, 2);
+		data[0] = 0x08;
+		data[1] = 0x14;
+		i2c_write(0x10, 0, 1, data, 2);	
+	}
 }
 #endif
 
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index 69acb694..218115b3 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -16,6 +16,7 @@
 #include <command.h>
 #include <miiphy.h>
 #include <phy.h>
+#include <asm/io.h>
 #include <errno.h>
 #include <asm/global_data.h>
 #include <dm/of_extra.h>
@@ -384,10 +385,79 @@ int genphy_parse_link(struct phy_device *phydev)
 	return 0;
 }
 
+static void disable_intelligent_ieee(struct phy_device *phydev)
+{
+	unsigned int value;
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0100);	/* switch to page 1 */
+	value = phy_read(phydev, MDIO_DEVAD_NONE, 0x17);	/* read address 0 0x17 register */
+	value &= ~(1 << 3);					/* reg 0x17 bit 3, set 0 to disable IEEE */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x17, value);
+	phy_write(phydev, MDIO_DEVAD_NONE,0x1f, 0x0000);	/* switch to page 0 */
+}
+
+static void disable_802_3az_ieee(struct phy_device *phydev)
+{
+	unsigned int value;
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x7);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x3c);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x1 << 14 | 0x7);
+	value = phy_read(phydev, MDIO_DEVAD_NONE, 0xe);
+	value &= ~(0x1 << 1);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x7);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x3c);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x1 << 14 | 0x7);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, value);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0200);	/* switch to page 2 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x18, 0x0000);
+}
+
+static void ephy_config_default(struct phy_device *phydev)
+{
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0100);	/* Switch to Page 1 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x12, 0x4824);	/* Disable APS */
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0200);	/* Switch to Page 2 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x18, 0x0000);	/* PHYAFE TRX optimization */
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0600);	/* Switch to Page 6 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x14, 0x708b);	/* PHYAFE TX optimization */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x13, 0xF000);	/* PHYAFE RX optimization */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x15, 0x1530);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0800);	/* Switch to Page 6 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x18, 0x00bc);	/* PHYAFE TRX optimization */
+}
+
+static void __maybe_unused ephy_config_fixed(struct phy_device *phydev)
+{
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0100);	/*switch to Page 1 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x12, 0x4824);	/*Disable APS */
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0200);	/*switch to Page 2 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x18, 0x0000);	/*PHYAFE TRX optimization */
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0600);	/*switch to Page 6 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x14, 0x7809);	/*PHYAFE TX optimization */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x13, 0xf000);	/*PHYAFE RX optimization */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x10, 0x5523);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x15, 0x3533);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0800);	/*switch to Page 8 */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x0844);	/*disable auto offset */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x18, 0x00bc);	/*PHYAFE TRX optimization */
+
+}
+
+#define sunxi_ac300_key (1<<8)
+
 int genphy_config(struct phy_device *phydev)
 {
 	int val;
 	u32 features;
+	u16 sid_value;
 
 	features = (SUPPORTED_TP | SUPPORTED_MII
 			| SUPPORTED_AUI | SUPPORTED_FIBRE |
@@ -431,7 +501,43 @@ int genphy_config(struct phy_device *phydev)
 	phydev->advertising &= features;
 
 	genphy_config_aneg(phydev);
-
+
+	val=readl(0x300622c);
+	sid_value=0xffff&val;
+	if(val&sunxi_ac300_key)
+	{
+		/*add quirk for h313/H616 emac1 ephy bb version bug*/
+		printf("apply fix for AC300 ephy bb version bug ...\n");
+		phy_write(phydev, MDIO_DEVAD_NONE, 0, 0x1f83);
+		phy_write(phydev, MDIO_DEVAD_NONE, 0, 0x1fb7);
+		phy_write(phydev, MDIO_DEVAD_NONE, 5, 0xa81f);
+		phy_write(phydev, MDIO_DEVAD_NONE, 6, 0);
+		udelay(500000);
+
+		val=phy_read(phydev, MDIO_DEVAD_NONE, 6);
+		val&=~(0x0f<<12);
+		val|=(0x0f&(0x03+sid_value))<<12;
+		phy_write(phydev,MDIO_DEVAD_NONE, 6,val);
+
+		if(sid_value&0x200) {
+			printf("using AC300 emac1 ephy fixed config ...\n");
+			ephy_config_fixed(phydev);
+		}
+		else {
+			printf("using AC300 emac1 ephy default config ...\n");
+			ephy_config_default(phydev);
+		}
+
+		disable_intelligent_ieee(phydev);
+
+		disable_802_3az_ieee(phydev);
+		phy_write(phydev, MDIO_DEVAD_NONE, 0x1f, 0x0000);
+
+		val=phy_read(phydev, MDIO_DEVAD_NONE, 6);
+		val|=(0x1<<11);
+		phy_write(phydev,MDIO_DEVAD_NONE, 6,val);
+		/*add end*/
+	}
 	return 0;
 }
 
diff --git a/drivers/net/sun8i_emac.c b/drivers/net/sun8i_emac.c
index d7553fe1..e90f9a74 100644
--- a/drivers/net/sun8i_emac.c
+++ b/drivers/net/sun8i_emac.c
@@ -340,7 +340,7 @@ static int sun8i_emac_set_syscon(struct sun8i_eth_pdata *pdata,
 		return 0;
 	}
 
-	reg = readl(priv->sysctl_reg + 0x30);
+	reg = readl(priv->sysctl_reg + 0x34);
 
 	reg = sun8i_emac_set_syscon_ephy(priv, reg);
 
@@ -381,7 +381,7 @@ static int sun8i_emac_set_syscon(struct sun8i_eth_pdata *pdata,
 		reg |= ((pdata->rx_delay_ps / 100) << SC_ERXDC_OFFSET)
 			 & SC_ERXDC_MASK;
 
-	writel(reg, priv->sysctl_reg + 0x30);
+	writel(reg, priv->sysctl_reg + 0x34);
 
 	return 0;
 }
@@ -1013,6 +1013,8 @@ static const struct udevice_id sun8i_emac_eth_ids[] = {
 		.data = (uintptr_t)R40_GMAC },
 	{.compatible = "allwinner,sun50i-h6-emac",
 		.data = (uintptr_t)H6_EMAC },
+	{.compatible = "allwinner,sun50i-h616-emac",
+		.data = (uintptr_t)H6_EMAC },
 	{ }
 };
 
diff --git a/include/configs/sunxi-common.h b/include/configs/sunxi-common.h
index c4f34dbf..16b25cc3 100644
--- a/include/configs/sunxi-common.h
+++ b/include/configs/sunxi-common.h
@@ -200,7 +200,7 @@
 #define CONFIG_SYS_I2C_MVTWSI
 #if !CONFIG_IS_ENABLED(DM_I2C)
 #define CONFIG_SYS_I2C
-#define CONFIG_SYS_I2C_SPEED		400000
+#define CONFIG_SYS_I2C_SPEED		100000
 #define CONFIG_SYS_I2C_SLAVE		0x7f
 #endif
 #endif
