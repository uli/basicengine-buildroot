From aec347d400c22344375c86804067909b377676d2 Mon Sep 17 00:00:00 2001
From: Jan Kiszka <jan.kiszka@siemens.com>
Date: Thu, 13 Feb 2020 08:25:30 +0100
Subject: [PATCH 080/184] ivshmem-net: Fix and rework MTU configuration

Use min/max_mtu to define the limits upfront. This also fixes changing
the MTU because the default values of those two prevented it so far.

Furthermore, all limits can be calculated during probe. Thus, there is
no need to validate anything in ivshm_net_change_mtu, provided updates
of a running device are rejected so that no queue can overrun.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 drivers/net/ivshmem-net.c | 28 ++++++----------------------
 1 file changed, 6 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ivshmem-net.c b/drivers/net/ivshmem-net.c
index 20fd459c8..38d68a934 100644
--- a/drivers/net/ivshmem-net.c
+++ b/drivers/net/ivshmem-net.c
@@ -38,8 +38,6 @@
 
 #define IVSHM_NET_FLAG_RUN		0
 
-#define IVSHM_NET_MTU_MIN		256
-#define IVSHM_NET_MTU_MAX		65535
 #define IVSHM_NET_MTU_DEF		16384
 
 #define IVSHM_NET_FRAME_SIZE(s) ALIGN(18 + (s), SMP_CACHE_BYTES)
@@ -199,7 +197,7 @@ static int ivshm_net_calc_qsize(struct net_device *ndev)
 
 	qsize = in->shmlen - vrsize;
 
-	if (qsize < 4 * IVSHM_NET_MTU_MIN)
+	if (qsize < 4 * ETH_MIN_MTU)
 		return -EINVAL;
 
 	in->vrsize = vrsize;
@@ -685,26 +683,10 @@ static int ivshm_net_stop(struct net_device *ndev)
 
 static int ivshm_net_change_mtu(struct net_device *ndev, int mtu)
 {
-	struct ivshm_net *in = netdev_priv(ndev);
-	struct ivshm_net_queue *tx = &in->tx;
-
-	if (mtu < IVSHM_NET_MTU_MIN || mtu > IVSHM_NET_MTU_MAX)
-		return -EINVAL;
-
-	if (in->tx.size / mtu < 4)
-		return -EINVAL;
-
-	if (ivshm_net_tx_space(in) < 2 * IVSHM_NET_FRAME_SIZE(mtu))
-		return -EBUSY;
-
-	if (in->tx.size - tx->head < IVSHM_NET_FRAME_SIZE(mtu) &&
-	    tx->head < tx->tail)
+	if (netif_running(ndev)) {
+		netdev_err(ndev, "must be stopped to change its MTU\n");
 		return -EBUSY;
-
-	netif_tx_lock_bh(ndev);
-	if (in->tx.size - tx->head < IVSHM_NET_FRAME_SIZE(mtu))
-		tx->head = 0;
-	netif_tx_unlock_bh(ndev);
+	}
 
 	ndev->mtu = mtu;
 
@@ -977,6 +959,8 @@ static int ivshm_net_probe(struct pci_dev *pdev,
 	ndev->netdev_ops = &ivshm_net_ops;
 	ndev->ethtool_ops = &ivshm_net_ethtool_ops;
 	ndev->mtu = min_t(u32, IVSHM_NET_MTU_DEF, in->qsize / 16);
+	ndev->min_mtu = ETH_MIN_MTU;
+	ndev->max_mtu = min_t(u32, ETH_MAX_MTU, in->qsize / 4);
 	ndev->hw_features = NETIF_F_HW_CSUM | NETIF_F_SG;
 	ndev->features = ndev->hw_features;
 
-- 
2.39.2

